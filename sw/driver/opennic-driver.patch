#
# Copyright (c) 2021 Yuta Tokusashi
# All rights reserved.
#
# This software was developed by the University of Cambridge Computer
# Laboratory under EPSRC EARL Project EP/P025374/1 alongside support 
# from Xilinx Inc.
#
# @NETFPGA_LICENSE_HEADER_START@
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# @NETFPGA_LICENSE_HEADER_END@
#
diff -uprN ./onic_hardware.h ./onic_hardware.h
--- ./onic_hardware.h	2020-10-10 22:22:57.000000000 +0900
+++ ./onic_hardware.h	2021-02-02 14:52:46.000000000 +0900
@@ -26,6 +26,7 @@ struct onic_hardware {
 	unsigned long qdma;
 	u8 num_cmacs;
 	void __iomem *addr;	/* mapping of shell registers */
+	unsigned long nfdp_handle;
 };
 
 struct onic_qdma_h2c_param {
diff -uprN ./onic_main.c ./onic_main.c
--- ./onic_main.c	2023-12-07 12:27:36.237535443 +0000
+++ ./onic_main.c	2023-12-07 12:33:38.980629056 +0000
@@ -22,6 +22,7 @@
 #include <linux/etherdevice.h>
 #include <linux/netdevice.h>
 #include <linux/moduleparam.h>
+#include <linux/version.h>

 #include "onic.h"
 #include "onic_hardware.h"
@@ -129,6 +130,9 @@ static const struct net_device_ops onic_
 	.ndo_start_xmit = onic_xmit_frame,
 	.ndo_set_mac_address = onic_set_mac_address,
 	.ndo_do_ioctl = onic_do_ioctl,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,6,0)
+	.ndo_siocdevprivate = onic_siocdevprivate,
+#endif
 	.ndo_change_mtu = onic_change_mtu,
 	.ndo_get_stats64 = onic_get_stats64,
 };
@@ -203,7 +207,9 @@ static int onic_probe(struct pci_dev *pd

 	memset(&saddr, 0, sizeof(struct sockaddr));
 	memcpy(saddr.sa_data, onic_default_dev_addr, 6);
-	get_random_bytes(saddr.sa_data + 3, 3);
+	saddr.sa_data[3] = pdev->bus->number;
+	saddr.sa_data[4] = PCI_SLOT(pdev->devfn);
+	saddr.sa_data[5] = PCI_FUNC(pdev->devfn);
 	onic_set_mac_address(netdev, (void *)&saddr);

 	priv = netdev_priv(netdev);
@@ -241,6 +247,15 @@ static int onic_probe(struct pci_dev *pd
 	netif_set_real_num_tx_queues(netdev, priv->num_tx_queues);
 	netif_set_real_num_rx_queues(netdev, priv->num_rx_queues);

+#ifdef NF_IOCTL
+	rv = onic_create_nfdp_dev(&priv->hw.nfdp_handle, priv->pdev);
+	if (rv < 0) {
+		pr_info("create_nfdp_dev() faileed %d", rv);
+		onic_destroy_nfdp_dev(priv->hw.nfdp_handle);
+		goto free_netdev;
+	}
+#endif /* NF_IOCTL */
+
 	rv = register_netdev(netdev);
 	if (rv < 0) {
 		dev_err(&pdev->dev, "register_netdev, err = %d", rv);

diff -uprN ./onic_netdev.c ./onic_netdev.c
--- onic_netdev.c.orig	2024-04-04 12:57:18.811283731 +0000
+++ onic_netdev.c	2024-04-04 13:00:43.616203180 +0000
@@ -25,6 +25,97 @@

 #define ONIC_RX_DESC_STEP 256

+#ifdef NF_IOCTL
+#define NFDP_OFFSET     0x0000
+#define NFDP_END        0x400000
+#define NFDP_MAXLEN     NFDP_END - NFDP_OFFSET
+
+#define NFDP_IOCTL_CMD_WRITE_REG        (SIOCDEVPRIVATE+1)
+#define NFDP_IOCTL_CMD_READ_REG         (SIOCDEVPRIVATE+2)
+
+
+// This should be here
+static struct nfdp_dev *onic_get_nfdp_dev(unsigned long handle)
+{
+	return (struct nfdp_dev *)handle;
+}
+
+// This should move to onic_main.c
+struct nfdp_dev *nfdp_create_dev(struct pci_dev *pdev, u8 bar)
+{
+	struct nfdp_dev *nfdev;
+
+	if (!pdev || (bar > 6))
+		return NULL;
+
+	nfdev = kzalloc(sizeof(struct nfdp_dev), GFP_KERNEL);
+	if (!nfdev)
+		return NULL;
+
+	nfdev->pdev = pdev;
+
+	nfdev->addr = pci_iomap_range(pdev, bar, NFDP_OFFSET, NFDP_MAXLEN);
+	if (!nfdev->addr) {
+		kfree(nfdev);
+		return NULL;
+	}
+	pr_info("BAR2 address is nfdev->addr[0x%p]", nfdev->addr);
+
+	return nfdev;
+}
+
+int onic_create_nfdp_dev(unsigned long *handle, struct pci_dev *pdev)
+{
+	struct nfdp_dev *nfdev;
+
+	if (!handle || !pdev)
+		return -EINVAL;
+
+	/* assume that CMAC registers are mapped at BAR2 */
+	nfdev = nfdp_create_dev(pdev, 2);
+	if (!nfdev)
+		return -ENOMEM;
+
+	spin_lock_init(&nfdev->lock);
+
+	*handle = (unsigned long)nfdev;
+	return 0;
+}
+
+void nfdp_destroy_dev(struct nfdp_dev *nfdev)
+{
+	if (!nfdev)
+		return;
+
+	pci_iounmap(nfdev->pdev, nfdev->addr);
+	kfree(nfdev);
+}
+
+void onic_destroy_nfdp_dev(unsigned long handle)
+{
+	struct nfdp_dev *nfdev = onic_get_nfdp_dev(handle);
+
+	if (!nfdev)
+		return;
+
+	nfdp_destroy_dev(nfdev);
+}
+
+
+// This should be here
+static inline u32 nfdp_read_reg(struct nfdp_dev *nfdev, u32 offset)
+{
+	return ioread32(nfdev->addr + offset);
+}
+
+// This should be here
+static inline void nfdp_write_reg(struct nfdp_dev *nfdev, u32 offset, u32 val)
+{
+	iowrite32(val, nfdev->addr + offset);
+}
+#endif /*NF_IOCTL*/
+
+
 inline static u16 onic_ring_get_real_count(struct onic_ring *ring)
 {
 	/* Valid writeback entry means one less count of descriptor entries */
@@ -747,6 +838,34 @@ netdev_tx_t onic_xmit_frame(struct sk_bu
 	return NETDEV_TX_OK;
 }

+#ifdef NF_IOCTL
+static int ioctl_read_reg(struct nfdp_dev *nfdev,
+				 struct onic_ioctl_ifreq *sifr)
+{
+	unsigned long flags;
+	// Spin lock ?
+	spin_lock_irqsave(&nfdev->lock, flags);
+	sifr->val = nfdp_read_reg(nfdev, (u32)sifr->addr);
+	spin_unlock_irqrestore(&nfdev->lock, flags);
+	pr_info("sifr->addr[%08x] sifr->val[%08x]", sifr->addr, sifr->val);
+
+	return 0;
+}
+
+static int ioctl_write_reg(struct nfdp_dev *nfdev,
+				 struct onic_ioctl_ifreq *sifr)
+{
+	unsigned long flags;
+	pr_info("sifr->addr[%08x] sifr->val[%08x]", sifr->addr, sifr->val);
+	// Spin lock ?
+	spin_lock_irqsave(&nfdev->lock, flags);
+	nfdp_write_reg(nfdev, (u32)sifr->addr, (u32)sifr->val);
+	spin_unlock_irqrestore(&nfdev->lock, flags);
+
+	return 0;
+}
+#endif /*NF_IOCTl*/
+
 int onic_set_mac_address(struct net_device *dev, void *addr)
 {
 	struct sockaddr *saddr = addr;
@@ -761,9 +880,59 @@ int onic_set_mac_address(struct net_devi
 	return 0;
 }

+int nf_onic_do_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd)
+ {
+#ifdef NF_IOCTL
+	struct onic_private *priv = netdev_priv(dev);
+	struct nfdp_dev *nfdev = onic_get_nfdp_dev(priv->hw.nfdp_handle);
+	struct onic_ioctl_ifreq sifr;
+	int err;
+
+	switch(cmd) {
+	case NFDP_IOCTL_CMD_WRITE_REG:
+		err = copy_from_user(&sifr, ifr->ifr_data,
+			sizeof(struct onic_ioctl_ifreq));
+		if (err != 0) {
+			err = -EFAULT;
+			break;
+		}
+		err = ioctl_write_reg(nfdev, &sifr);
+		break;
+	case NFDP_IOCTL_CMD_READ_REG:
+		err = copy_from_user(&sifr, ifr->ifr_data,
+			sizeof(struct onic_ioctl_ifreq));
+		if (err != 0) {
+			err = -EFAULT;
+			break;
+		}
+		err = ioctl_read_reg(nfdev, &sifr);
+		if (err != 0) {
+			err = -EFAULT;
+			break;
+		}
+		err = copy_to_user(ifr->ifr_data, &sifr,
+			sizeof(struct onic_ioctl_ifreq));
+		if (err != 0)
+			err = -EFAULT;
+		break;
+	default:
+		pr_info("unspported ioctl 0x%8x", cmd);
+		err = -EOPNOTSUPP;
+		break;
+	}
+#endif /*NF_IOCTL*/
+	return 0;
+}
+
 int onic_do_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd)
 {
-	return 0;
+	return nf_onic_do_ioctl(dev, ifr, cmd);
+}
+
+int onic_siocdevprivate(struct net_device *dev, struct ifreq *ifr,
+		void *data, int cmd)
+{
+	return nf_onic_do_ioctl(dev, ifr, cmd);
 }

 int onic_change_mtu(struct net_device *dev, int mtu)
diff -uprN ./onic_netdev.h ./onic_netdev.h
--- ./onic_netdev.h	2023-12-07 12:27:36.237535443 +0000
+++ ./onic_netdev.h	2023-12-07 12:35:34.613759583 +0000
@@ -43,10 +43,32 @@ int onic_set_mac_address(struct net_devi
 
 int onic_do_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd);
 
+int onic_siocdevprivate(struct net_device *dev, struct ifreq *ifr, void *data, int cmd);
+
 int onic_change_mtu(struct net_device *dev, int mtu);
 
 void onic_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats);
 
 int onic_poll(struct napi_struct *napi, int budget);
 
+
+#define NF_IOCTL
+#ifdef NF_IOCTL
+
+struct nfdp_dev {
+	struct pci_dev *pdev;
+	void __iomem *addr;
+	spinlock_t lock;
+};
+
+struct onic_ioctl_ifreq {
+	uint32_t addr;
+	uint32_t val;
+};
+
+int onic_create_nfdp_dev(unsigned long *handle, struct pci_dev *pdev);
+
+void onic_destroy_nfdp_dev(unsigned long handle);
+#endif /* NF_IOCTL */
+
 #endif
